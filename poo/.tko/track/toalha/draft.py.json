{
    "patches": [
        {
            "label": "2025-09-16_19-39-49",
            "content": "@@ -1,1147 +1,29 @@\n-#- Crie uma classe Toalha %60Towel%60 com os atributos cor %60color%60, tamanho %60size%60 e umidade %60wetness%60.%0A#- Crie um construtor que inicialize todos os atributos cor e tamanho com valores recebidos como par%C3%A2metro e umidade com 0.%0A- Crie um m%C3%A9todo enxugar %60dry%60 que recebe um valor inteiro quantidade %60amout%60 e AUMENTA o atributo umidade da toalha.%0A- Crie um m%C3%A9todo torcer %60wringOut%60 que zera o atributo umidade da towel.%0A- Crie um m%C3%A9todo para pegar m%C3%A1ximo de umidade %60getMaxWetness%60 que retorna o valor m%C3%A1ximo de umidade que essa toalha pode ter.%0A- O m%C3%A1ximo de umidade que uma toalha pode ter %C3%A9 de acordo com o tamanho dela:%0A  - %60P%60 -%3E 10%0A  - %60M%60 -%3E 20%0A  - %60G%60 -%3E 30%0A- Crie um m%C3%A9todo que retorna se a toalha esta seca %60isDry%60, que retorna %60true%60 se a umidade da toalha for 0 e %60false%60 caso contr%C3%A1rio.%0A- Fa%C3%A7a um c%C3%B3digo de teste para validar o comportamento da classe Toalha.%0A%0Aprint(%22ol%C3%A1%22)%0A%0Aclass Towel:%0A    def __init__(self, color: str, size: str):%0A        self.color: str = color%0A        self.size: str = size%0A        self.wetness: int = 0%0A%0Aclass Tower %7B%0A    color,%0A    size,%0A    wetness%0A%7D%0A%0Aclass Towel:%0A    def __init__(self, color: str, size:str):%0A%0A%0A\n+print (%22minha toalha %C3%A9 bege%22)\n",
            "lines": "1"
        },
        {
            "label": "2025-09-16_20-03-21",
            "content": "@@ -1,188 +1,1395 @@\n+@@ -1,17 +1,1147 @@%0A-%250A%250Aprint(%2522ol%25C3%25A1%2522)%0A+#- Crie uma \n class\n+e\n  To\n-wel:%0A    def __init__(self):%0A        self.color = %22blue%22%0A        self.size = %22G%22%0A        sel.wetness = 0%0A%0Atowel = Towel()%0Aprint(towel.color)%0Aprint(tow\n+alha %2560Towel%2560 com os atributos cor %2560color%2560, tamanho %2560size%2560 e umidade %2560wetness%2560.%250A#- Crie um construtor que inicialize todos os atributos cor e tamanho com valores recebidos como par%25C3%25A2metro e umidade com 0.%250A- Crie um m%25C3%25A9todo enxugar %2560dry%2560 que recebe um valor inteiro quantidade %2560amout%2560 e AUMENTA o atributo umidade da toalha.%250A- Crie um m%25C3%25A9todo torcer %2560wringOut%2560 que zera o atributo umidade da towel.%250A- Crie um m%25C3%25A9todo para pegar m%25C3%25A1ximo de umidade %2560getMaxWetness%2560 que retorna o valor m%25C3%25A1ximo de umidade que essa toalha pode ter.%250A- O m%25C3%25A1ximo de umidade que uma toalha pode ter %25C3%25A9 de acordo com o tamanho dela:%250A  - %2560P%2560 -%253E 10%250A  - %2560M%2560 -%253E 20%250A  - %2560G%2560 -%253E 30%250A- Crie um m%25C3%25A9todo que retorna se a toalha esta seca %2560isDry%2560, que retorna %2560true%2560 se a umidade da toalha for 0 e %2560false%2560 caso contr%25C3%25A1rio.%250A- Fa%25C3%25A7a um c%25C3%25B3digo de teste para validar o comportamento da classe Toalha.%250A%250Aprint(%2522ol%25C3%25A1%2522)%250A%250Aclass Towel:%250A    def __init__(self, color: str, size: str):%250A        self.color: str = color%250A        s\n el\n+f\n .size\n-)%0Aprint(towel.wetness)\n+: str = size%250A        self.wetness: int = 0%250A%250Aclass Tower %257B%250A    color,%250A    size,%250A    wetness%250A%257D%250A%250Aclass Towel:%250A    def __init__(self, color: str, size:str):%0A %250A%250A%250A\n %0A\n",
            "lines": "4"
        },
        {
            "label": "2025-09-16_20-08-52",
            "content": "@@ -1,135 +1,380 @@\n-class Towel:%0A    def __init__(self):%0A        self.color = %22blue%22%0A        self.size = %22G%22%0A        self.wetness = 0%0A%0Atowel = Tow\n+@@ -1,8 +1,28 @@%0A+@@ -1,134 +1,34 @@%250A-%0A class To%0A@@ -25,17 +25,19 @@%0A s Towel:%0A-%250A%0A+%25250A%0A     def %0A@@ -51,17 +51,19 @@%0A _(self):%0A-%250A%0A+%25250A%0A         %0A@@ -79,15 +79,21 @@%0A r = %0A-%2522%0A+%252522%0A blue%0A-%2522%250A%0A+%252522%25250A%0A     %0A@@ -112,12 +112,18 @@%0A e = %0A-%2522G%2522%250A%0A+%252522G%252522%25250A%0A     %0A@@ -145,10 +145,14 @@%0A  = 0%0A-%250A%250A%0A+%25250A%25250A%0A towe%0A@@ -166,31 +166,108 @@%0A \n el()%0A\n+-%250A\n towe\n@@ -387,70 +387,339 @@\n r = \n-%22\n+%2522\n white\n-%22%0Aprint(towel.color)%0Aprint(towel.size)%0Aprint(towel.wetness)\n+%2522%250A%0A+%25250A%250A+@@ -127,30 +127,8 @@%25250A l()%2525250A%25250A-%250A towe%250A@@ -41,70 +41,25 @@%250A r = %250A-%252522%250A+%25252522%250A white%250A-%252522%25250A%0A prin%0A@@ -280,17 +280,19 @@%0A l.color)%0A-%250A%0A+%25250A%0A print(to%0A@@ -300,17 +300,19 @@%0A el.size)%0A-%250A%0A+%25250A%0A print(to%0A@@ -324,8 +324,33 @@%0A etness)%250A%0A++%25252522%2525250A%25250A prin%250A %25250A%250A\n %0A\n",
            "lines": "49"
        },
        {
            "label": "2025-09-16_20-10-22",
            "content": "@@ -1,191 +1,40 @@\n-# Criar a classe toalha com cor, tamanho e umidade%0A# Iniciar cor e tamanho com par%C3%A2metros definidos e umidade = 0%0A%0Aclass Towel:%0A    def __init__(self), color: str, size: str) #Constuctor \n+class Towel:%0A    def __init__(self):\n %0A   \n@@ -55,23 +55,14 @@\n r = \n-color #atribut \n+%22blue%22\n %0A   \n@@ -82,21 +82,11 @@\n e = \n-size #atribut\n+%22G%22\n %0A   \n@@ -110,119 +110,25 @@\n  = 0\n- #atribut%0A%0A#referencia%0Atowel = Towel(%22blue%22, %22G%22) #object%0Atowel_2 = Towel (%22green%22, %22P%22) #object %0Aoutra = towel\n+%0A%0Atowel = Towel()\n %0Atow\n",
            "lines": "11"
        },
        {
            "label": "2025-09-16_20-19-16",
            "content": "@@ -1,474 +1,1162 @@\n-# Criar a classe toalha com cor, tamanho e umidade%0A# Iniciar cor e tamanho com par%C3%A2metros definidos e umidade = 0%0A%0Aclass Towel:%0A    def __init__(self, color: str, size: str) #Constuctor %0A        self.color = color #atribut %0A        self.size = size #atribut%0A        self.wetness = 0 #atribut%0A%0A#referencia%0Atowel = Towel(%22blue%22, %22G%22) #object%0Atowel_2 = Towel (%22green%22, %22P%22) #object %0Aoutra = towel%0Atowel.color = %22white%22%0Aprint(towel.color)%0Aprint(towel.size)%0Aprint(towel.wetness)\n+@@ -1,8 +1,28 @@%0A+@@ -1,474 +1,45 @@%250A-%0A # Criar %0A@@ -63,17 +63,19 @@%0A  umidade%0A-%250A%0A+%25250A%0A # Inicia%0A@@ -101,9 +101,14 @@%0A  par%0A-%25C3%25A2%0A+%2525C3%2525A2%0A metr%0A@@ -133,18 +133,22 @@%0A dade = 0%0A-%250A%250A%0A+%25250A%25250A%0A class To%0A@@ -151,17 +151,19 @@%0A s Towel:%0A-%250A%0A+%25250A%0A     def %0A@@ -212,17 +212,19 @@%0A stuctor %0A-%250A%0A+%25250A%0A         %0A@@ -251,17 +251,19 @@%0A atribut %0A-%250A%0A+%25250A%0A         %0A@@ -287,17 +287,19 @@%0A #atribut%0A-%250A%0A+%25250A%0A         %0A@@ -327,10 +327,14 @@%0A ibut%0A-%250A%250A%0A+%25250A%25250A%0A #ref%0A@@ -340,17 +340,19 @@%0A ferencia%0A-%250A%0A+%25250A%0A towel = %0A@@ -361,19 +361,27 @@%0A wel(%0A-%2522%0A+%252522%0A blue%0A-%2522, %2522G%2522%0A+%252522, %252522G%252522%0A ) #o%0A@@ -385,17 +385,19 @@%0A  #object%0A-%250A%0A+%25250A%0A towel_2 %0A@@ -409,20 +409,28 @@%0A el (%0A-%2522%0A+%252522%0A green%0A-%2522, %2522P%2522%0A+%252522, %252522P%252522%0A ) #o%0A@@ -435,17 +435,19 @@%0A #object %0A-%250A%0A+%25250A%0A outra = %0A@@ -451,17 +451,19 @@%0A  = towel%0A-%250A%0A+%25250A%0A towel.co%0A@@ -472,16 +472,22 @@%0A r = %0A-%2522%0A+%252522%0A white%0A-%2522%250A%0A+%252522%25250A%0A prin%0A@@ -500,17 +500,19 @@%0A l.color)%0A-%250A%0A+%25250A%0A print(to%0A@@ -520,17 +520,19 @@%0A el.size)%0A-%250A%0A+%25250A%0A print(to%0A@@ -544,8 +544,65 @@%0A etness)%250A%0A++@@ -142,16 +142,17 @@%25250A t__(self%25250A+)%25250A , color:%250A %25250A%250A\n %0A\n",
            "lines": "100"
        },
        {
            "label": "2025-09-16_20-19-33",
            "content": "@@ -166,17 +166,16 @@\n ze: str)\n-:\n  #Constu\n",
            "lines": "17"
        },
        {
            "label": "2025-09-16_20-19-46",
            "content": "@@ -291,119 +291,8 @@\n ut%0A%0A\n-%0A        def __str__ (self):%0A            return f%22color:%7Bself.color%7D, size%7Bself.size%7D, wetness%7Bself.wetness%7D%22%0A%0A\n #ref\n",
            "lines": "17"
        },
        {
            "label": "2025-09-16_20-22-47",
            "content": "# Criar a classe toalha com cor, tamanho e umidade\n# Iniciar cor e tamanho com par\u00e2metros definidos e umidade = 0\n\nclass Towel:\n    def __init__(self, color: str, size: str): #Constuctor \n        self.color = color #atribut \n        self.size = size #atribut\n        self.wetness = 0 #atribut\n\n\n        def __str__ (self):\n            return f\"color:{self.color}, size{self.size}, wetness{self.wetness}\"\n\n#referencia\ntowel = Towel(\"blue\", \"G\") #object\ntowel_2 = Towel (\"green\", \"P\") #object \noutra = towel\ntowel.color = \"white\"\nprint(towel.color)\nprint(towel.size)\nprint(towel.wetness)\n",
            "lines": "21"
        }
    ]
}